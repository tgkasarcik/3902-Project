Author: Tommy Kasarcik
Date: 3/11/2022
File Reviewed: CollisionHandler.cs
Author of Reviewed File: Ben Borszcz
Code Smells Focused on:
  -Excessive use of literals
  -Duplicated Code
  -Comments
  -Conditional Complexity
  -Large class
  -Inconsistent names
  -Data Class
  -Indecent Exposure
  -Refused Bequest
  -Long Method
  
Comments:
  Code is of very high quality overall.  There is no excessive use of literals in this file.  There is some slightly duplicated code in each of the add collisions
  methods.  I can't say for sure if it is necessary to have a different method for each type of objects, but this may be a way can reduce complexity in the future.
  Comments could be improved.  Conditional complexity is normal.  This is a somewhat large class, but I think it is justified in this case.  Naming appears to be
  consistent throughout.  This is not a data class.  There is no indecent exposure here.  This class does not implement an interface, so there is no refused bequest.  
  Each of the add collision methods are rather long, but there isn't any way I can see to shorten them, so it is not a problem in this case.  Overall, this class is 
  quite solid in terms of quality.
  
Suggestion:
  As I alluded to earlier, my only suggestion for this class as it currently stands is to find a way to simplify adding collision responses to the dictionary so 
  that there is not a need to have a different method for each type of object.  I think finding a way to do this will reduce the complexity of this class while
  simultaneously raising its quality.  
