Author: Tommy Kasarcik
Date: 2/14/2022
Sprint: 2
File Reviewed: GoombaStateMachine.cs
Author of Reviewed File: Alek Srode
Start Time: 11:15
End Time: 11:41
Total Time: 26 Minutes
Code Smells Focused On:
  -Excessive use of literals
  -Duplicated Code
  -Comments
  -Conditional Complexity
  -Large class
  -Inconsistent names
Comments:
  Overall, the code here is fairly readable.  The first thing I notice about this file, however, is that line 10 and all
  following lines within the same block should be indented one tab further right than line 8.  Next, in line with the Excessive
  use of literals code smell, I notice that string literals are used in this class to determine the Goomba's state.  While I understand
  this decision, it is not the most readible choice, because it is not clear to an outside user of the class that there should only be a finite
  number of states for this class.  Since strings are used, with the way this is set up, there are an infinite number of possible states, which
  is not the intention.  In terms of duplicated code, there is none here.  For comments, I think they could be a bit more detailed for Update()
  to enhance its readibility, but are decent overall.  In terms of conditional complexity, this class is fine.  This class does not appear to be
  overly long.  While the variables here are all named consistently, by convention, all public properties of a class in C# should be written in 
  PascalCase and not in camelCase as they are now.  





