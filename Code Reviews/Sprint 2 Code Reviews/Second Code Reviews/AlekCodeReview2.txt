Readability Code Review
Date: 02/18/22
Sprint: 2
File Name: SpriteFactory
File Author Name: Tommy Kasarcik
Time for Review: 8 min
----- Comments As Follows -----
- Does brickSheet refer to the breakable bricks, or the unbreakable ones? A comment or rename could improve clarity.
- Does uBlockSheet refer to the unbreakable bricks? If so, does that also include the texture of the fully used QuestionMark block and CoinBlock? A comment or rename could improve clarity.
- What are all the short enemies that shortEnemySheet refers to? Similarly for tallEnemySheet. A comment would probably be best to improve clarity.
- Does bigMarioSheet include Fireflower and Star Marios? A comment would probably be best to improve clarity.
- Comments made on everything are clear and make sense. Very helpful in splitting the different sprite grabs/loads.
- I would assume the variable name "ret" is short for the "thing" to return? A comment or rename could improve clarity.
- String names for all cases are understandable and provide context to programmer for what should be expected to get returned in the case called for.
- The deafult sprite return of a "missing texture" grab is a good addition, will help in debugging later if needed.



Quality Code Review
Date: 02/18/22
Sprint: 2
File Name: Mario
File Author Name: Ruidong Zhang
Time for Review: 10 min
----- Comments As Follows -----
- States and object's screen location should be held by a StateMachine rather than the object itself, will help for state and location manipulation. Mario shouldn't have to concern itself with what states it has.
- The constructor has a rather large number of parameters. It may help to reduce that by combining all the booleans used into a single object, may be able to clean up after StatMachine is made.
- Reset function is a little unclear, along with the Constructor's functions, but this may easily get cleaned up by making a StateMachine that will handle the States rather than how Mario does here.
- Functions for applying in game changes are short, readable, and make sense.
- The Interact function has to be implemented eventually, but rather than throw and exception, it might be better to just do a return call. Not sure though as I am not sure how the throw works.
- PickupPower function can be condensed. Will be able to do so when the StateMachine is created.
- Using a string to define "power" in the PickupPower function may cause bugs later on. Using an Enum may be a better option.
- Mario's Update needs to have the code for getting/updating his Sprite as well with the current code. But after creating a StateMachine class, the function can be condensed and the StateMachine can handle the Sprite update instead.
